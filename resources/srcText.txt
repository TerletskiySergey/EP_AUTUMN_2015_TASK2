	Как пояснялось ранее, функциональным называется такой интерфейс, в котором
определяется единственный абстрактный метод. Те, у кого имеется предыду-
щий опыт программирования нa java, могут возразить, что все методы интер-
фейса неявно считаются абстрактными, но так было до внедрения лямбда-выражений.
Как пояснялось в главе 9, начиная с версии JDК 8 для метода, объявляемого в интерфейсе,
можно определить стандартное поведение по умолчанию, и поэтому
он называется методом по умолчанию. Отныне интерфейсный метод считается абстрактным
лишь в том случае, если у него отсутствует реализация по умолчанию.
А поскольку интерфейсные методы, не определяемые по умолчанию, неявно считаются
абстрактными, то их не обязательно объявлять с модификатором доступа
abstract, хотя это и можно сделать при желании.
	Ниже приведен пример объявления функционального интерфейса.
	
interface MyNumber {
	double getValue ();
}

	В данном случае метод getValue() неявно считается абстрактным и единственным
определяемым в интерфейсе MyNumber. Следовательно, интерфейс MyNumber
является функциональным, а его функция определяется методом getValue().
	Как упоминалось ранее, лямбда-выражение не выполняется самостоятельно, а ско­
рее образует реализацию абстрактного метода, определенного в функциональном ин-
терфейсе, где указывается его целевой тип. Таким образом, лямбда-выражение может
быть указано только в том контексте, в котором определен его целевой тип. Один
из таких контекстов создается в том случае, когда лямбда-выражение присваивается
ссылке на функциональный интерфейс. К числу других контекстов целевого типа от­
носятся инициализация переменных, операторы return и аргументы методов.
Рассмотрим пример, демонстрирующий применение лямбда-выражения в контекс-
те присваивания. С этой целью сначала объявляется ссылка на функциональный
интерфейс MyNumber, как показано ниже.

\\ создать ссылку на функциональный интерфейс МyNumber
MyNumber myNum;

	Затем лямбда-выражение присваивается этой ссылке на функциональный интерфейс
следующим образом:

\\ использовать лямбда-выражение в контексте присваивания
myNum = ( ) - > 123.45;

	Когда лямбда-выражение появляется в контексте своего целевого типа, автоматически
создается экземпляр класса, реализующего функциональный интерфейс,
при чем лямбда-выражение определяет поведение абстрактного метода, объявляем
его в функциональном интерфейсе. А когда этот метод вызывается через свой
адресат, выполняется лямбда-выражение. Таким образом, лямбда-выражение позволяет
преобразовать сегмент кода в объект.
	В предыдущем примере лямбда-выражение становится реализацией метода
getValue(). В итоге получается значение константы 123,45, которое выводится
на экран с ледующим образом:
\\вызвать метод qetValue(), реализуемый
\\ присвоенным ранее лямбда-выражением
System.out.println(myNum.getValue());
	Лямбда-выражение было ранее присвоено переменной myNum ссылки на функ-
циональный интерфейс myNumber. Оно возвращает значение константы 123,45,
которое получается в результате вызова метода getValue().
	Для того чтобы лямбда-выражение использовалось в контексте своего целевого
типа, абстрактный метод и лямбда-выражение должны быть совместимыми по типу.
Так, если в абстрактном методе указываются два параметра типа int, то и в лямбда-выражении
должны быть указаны два параметра, тип которых явно обозначается как
int или неявно выводится как int из самого контекста. В общем, параметры лямбда-выражения
должны быть совместимы по типу и количеству с параметрами абстракт­
ного метода. Это же относится и к возвращаемым типам. А любые исключения, генерируемые
в лямбда-выражении, должны быть приемлемы для абстрактного метода.